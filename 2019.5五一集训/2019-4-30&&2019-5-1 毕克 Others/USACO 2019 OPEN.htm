<!DOCTYPE html>
<!--[if IE 7]>
<html class="ie ie7" lang="en-US">
<![endif]-->
<!--[if IE 8]>
<html class="ie ie8" lang="en-US">
<![endif]-->
<!--[if !(IE 7) & !(IE 8)]><!-->
<html lang="en-US">
<!--<![endif]-->
<head>
<meta charset="UTF-8" />
<meta name="viewport" content="width=device-width" />
<title>USACO 2019 OPEN | wwwwodddd&#039;website</title>
<link rel="profile" href="http://gmpg.org/xfn/11" />
<link rel="pingback" href="http://wwwwodddd.com/xmlrpc.php">
<!--[if lt IE 9]>
<script src="http://wwwwodddd.com/wp-content/themes/twentytwelve/js/html5.js" type="text/javascript"></script>
<![endif]-->
<meta name='robots' content='noindex,follow' />
<link rel='dns-prefetch' href='//cdn.jsdelivr.net' />
<link rel='dns-prefetch' href='//fonts.googleapis.com' />
<link rel='dns-prefetch' href='//s.w.org' />
<link href='https://fonts.gstatic.com' crossorigin rel='preconnect' />
<link rel="alternate" type="application/rss+xml" title="wwwwodddd&#039;website &raquo; Feed" href="http://wwwwodddd.com/feed/" />
<link rel="alternate" type="application/rss+xml" title="wwwwodddd&#039;website &raquo; Comments Feed" href="http://wwwwodddd.com/comments/feed/" />
<link rel="alternate" type="application/rss+xml" title="wwwwodddd&#039;website &raquo; USACO 2019 OPEN Comments Feed" href="http://wwwwodddd.com/usaco-2019-open/feed/" />
		<script type="text/javascript">
			window._wpemojiSettings = {"baseUrl":"https:\/\/s.w.org\/images\/core\/emoji\/11.2.0\/72x72\/","ext":".png","svgUrl":"https:\/\/s.w.org\/images\/core\/emoji\/11.2.0\/svg\/","svgExt":".svg","source":{"concatemoji":"http:\/\/wwwwodddd.com\/wp-includes\/js\/wp-emoji-release.min.js?ver=5.1.1"}};
			!function(a,b,c){function d(a,b){var c=String.fromCharCode;l.clearRect(0,0,k.width,k.height),l.fillText(c.apply(this,a),0,0);var d=k.toDataURL();l.clearRect(0,0,k.width,k.height),l.fillText(c.apply(this,b),0,0);var e=k.toDataURL();return d===e}function e(a){var b;if(!l||!l.fillText)return!1;switch(l.textBaseline="top",l.font="600 32px Arial",a){case"flag":return!(b=d([55356,56826,55356,56819],[55356,56826,8203,55356,56819]))&&(b=d([55356,57332,56128,56423,56128,56418,56128,56421,56128,56430,56128,56423,56128,56447],[55356,57332,8203,56128,56423,8203,56128,56418,8203,56128,56421,8203,56128,56430,8203,56128,56423,8203,56128,56447]),!b);case"emoji":return b=d([55358,56760,9792,65039],[55358,56760,8203,9792,65039]),!b}return!1}function f(a){var c=b.createElement("script");c.src=a,c.defer=c.type="text/javascript",b.getElementsByTagName("head")[0].appendChild(c)}var g,h,i,j,k=b.createElement("canvas"),l=k.getContext&&k.getContext("2d");for(j=Array("flag","emoji"),c.supports={everything:!0,everythingExceptFlag:!0},i=0;i<j.length;i++)c.supports[j[i]]=e(j[i]),c.supports.everything=c.supports.everything&&c.supports[j[i]],"flag"!==j[i]&&(c.supports.everythingExceptFlag=c.supports.everythingExceptFlag&&c.supports[j[i]]);c.supports.everythingExceptFlag=c.supports.everythingExceptFlag&&!c.supports.flag,c.DOMReady=!1,c.readyCallback=function(){c.DOMReady=!0},c.supports.everything||(h=function(){c.readyCallback()},b.addEventListener?(b.addEventListener("DOMContentLoaded",h,!1),a.addEventListener("load",h,!1)):(a.attachEvent("onload",h),b.attachEvent("onreadystatechange",function(){"complete"===b.readyState&&c.readyCallback()})),g=c.source||{},g.concatemoji?f(g.concatemoji):g.wpemoji&&g.twemoji&&(f(g.twemoji),f(g.wpemoji)))}(window,document,window._wpemojiSettings);
		</script>
		<style type="text/css">
img.wp-smiley,
img.emoji {
	display: inline !important;
	border: none !important;
	box-shadow: none !important;
	height: 1em !important;
	width: 1em !important;
	margin: 0 .07em !important;
	vertical-align: -0.1em !important;
	background: none !important;
	padding: 0 !important;
}
</style>
	<link rel='stylesheet' id='wp-block-library-css'  href='http://wwwwodddd.com/wp-includes/css/dist/block-library/style.min.css?ver=5.1.1' type='text/css' media='all' />
<link rel='stylesheet' id='wp-block-library-theme-css'  href='http://wwwwodddd.com/wp-includes/css/dist/block-library/theme.min.css?ver=5.1.1' type='text/css' media='all' />
<link rel='stylesheet' id='Katex-css'  href='http://cdn.jsdelivr.net/wp/wp-editormd/tags/10.0.3/assets/KaTeX/katex.min.css?ver=10.0.3' type='text/css' media='all' />
<link rel='stylesheet' id='prism-theme-default-css'  href='http://cdn.jsdelivr.net/wp/wp-editormd/tags/10.0.3/assets/Prism.js/themes/prism.css?ver=1.15.0' type='text/css' media='all' />
<link rel='stylesheet' id='prism-plugin-toolbar-css'  href='http://cdn.jsdelivr.net/wp/wp-editormd/tags/10.0.3/assets/Prism.js/plugins/toolbar/prism-toolbar.css?ver=1.15.0' type='text/css' media='all' />
<link rel='stylesheet' id='prism-plugin-line-numbers-css'  href='http://cdn.jsdelivr.net/wp/wp-editormd/tags/10.0.3/assets/Prism.js/plugins/line-numbers/prism-line-numbers.css?ver=1.15.0' type='text/css' media='all' />
<link rel='stylesheet' id='wordpress-file-upload-style-css'  href='http://wwwwodddd.com/wp-content/plugins/wp-file-upload/css/wordpress_file_upload_style.css?ver=5.1.1' type='text/css' media='all' />
<link rel='stylesheet' id='wordpress-file-upload-style-safe-css'  href='http://wwwwodddd.com/wp-content/plugins/wp-file-upload/css/wordpress_file_upload_style_safe.css?ver=5.1.1' type='text/css' media='all' />
<link rel='stylesheet' id='wordpress-file-upload-adminbar-style-css'  href='http://wwwwodddd.com/wp-content/plugins/wp-file-upload/css/wordpress_file_upload_adminbarstyle.css?ver=5.1.1' type='text/css' media='all' />
<link rel='stylesheet' id='jquery-ui-css-css'  href='http://wwwwodddd.com/wp-content/plugins/wp-file-upload/vendor/jquery/jquery-ui.min.css?ver=5.1.1' type='text/css' media='all' />
<link rel='stylesheet' id='jquery-ui-timepicker-addon-css-css'  href='http://wwwwodddd.com/wp-content/plugins/wp-file-upload/vendor/jquery/jquery-ui-timepicker-addon.min.css?ver=5.1.1' type='text/css' media='all' />
<link rel='stylesheet' id='twentytwelve-fonts-css'  href='https://fonts.googleapis.com/css?family=Open+Sans:400italic,700italic,400,700&#038;subset=latin,latin-ext' type='text/css' media='all' />
<link rel='stylesheet' id='twentytwelve-style-css'  href='http://wwwwodddd.com/wp-content/themes/twentytwelve/style.css?ver=5.1.1' type='text/css' media='all' />
<link rel='stylesheet' id='twentytwelve-block-style-css'  href='http://wwwwodddd.com/wp-content/themes/twentytwelve/css/blocks.css?ver=20181230' type='text/css' media='all' />
<!--[if lt IE 9]>
<link rel='stylesheet' id='twentytwelve-ie-css'  href='http://wwwwodddd.com/wp-content/themes/twentytwelve/css/ie.css?ver=20121010' type='text/css' media='all' />
<![endif]-->
<!--[if lt IE 8]>
<script type='text/javascript' src='http://wwwwodddd.com/wp-includes/js/json2.min.js?ver=2015-05-03'></script>
<![endif]-->
<script type='text/javascript' src='http://wwwwodddd.com/wp-content/plugins/wp-file-upload/js/wordpress_file_upload_functions.js?ver=5.1.1'></script>
<link rel='https://api.w.org/' href='http://wwwwodddd.com/wp-json/' />
<link rel="EditURI" type="application/rsd+xml" title="RSD" href="http://wwwwodddd.com/xmlrpc.php?rsd" />
<link rel="wlwmanifest" type="application/wlwmanifest+xml" href="http://wwwwodddd.com/wp-includes/wlwmanifest.xml" /> 
<link rel='prev' title='BestCoder Round #72' href='http://wwwwodddd.com/bestcoder-round-72/' />
<link rel='next' title='GCJ 2019 R1B' href='http://wwwwodddd.com/gcj-2019-r1b/' />
<meta name="generator" content="WordPress 5.1.1" />
<link rel="canonical" href="http://wwwwodddd.com/usaco-2019-open/" />
<link rel='shortlink' href='http://wwwwodddd.com/?p=166' />
<link rel="alternate" type="application/json+oembed" href="http://wwwwodddd.com/wp-json/oembed/1.0/embed?url=http%3A%2F%2Fwwwwodddd.com%2Fusaco-2019-open%2F" />
<link rel="alternate" type="text/xml+oembed" href="http://wwwwodddd.com/wp-json/oembed/1.0/embed?url=http%3A%2F%2Fwwwwodddd.com%2Fusaco-2019-open%2F&#038;format=xml" />
		<style type="text/css">.recentcomments a{display:inline !important;padding:0 !important;margin:0 !important;}</style>
		</head>

<body class="post-template-default single single-post postid-166 single-format-standard wp-embed-responsive custom-font-enabled single-author">
<div id="page" class="hfeed site">
	<header id="masthead" class="site-header" role="banner">
		<hgroup>
			<h1 class="site-title"><a href="http://wwwwodddd.com/" title="wwwwodddd&#039;website" rel="home">wwwwodddd&#039;website</a></h1>
			<h2 class="site-description">慕君之心，至死方休。</h2>
		</hgroup>

		<nav id="site-navigation" class="main-navigation" role="navigation">
			<button class="menu-toggle">Menu</button>
			<a class="assistive-text" href="#content" title="Skip to content">Skip to content</a>
			<div class="menu-menu-1-container"><ul id="menu-menu-1" class="nav-menu"><li id="menu-item-141" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-home menu-item-141"><a href="http://wwwwodddd.com/">Home</a></li>
<li id="menu-item-142" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-142"><a href="http://wwwwodddd.com/about/">About</a></li>
</ul></div>		</nav><!-- #site-navigation -->

			</header><!-- #masthead -->

	<div id="main" class="wrapper">

	<div id="primary" class="site-content">
		<div id="content" role="main">

			
				
	<article id="post-166" class="post-166 post type-post status-publish format-standard hentry category-uncategorized tag-usaco">
				<header class="entry-header">
			
						<h1 class="entry-title">USACO 2019 OPEN</h1>
										<div class="comments-link">
					<a href="http://wwwwodddd.com/usaco-2019-open/#respond"><span class="leave-reply">Leave a reply</span></a>				</div><!-- .comments-link -->
					</header><!-- .entry-header -->

				<div class="entry-content">
			<p><span id="more-166"></span></p>
<h1>Bronze</h1>
<h2>B1</h2>
<pre><code class="language-cpp line-numbers">#include &lt;bits/stdc++.h&gt;
using namespace std;
char s[20][20];
int d[20][20];
queue&lt;int&gt; q;
int dx[] = {0, 0, 1, -1};
int dy[] = {1, -1, 0, 0};
bool in(int x, int y) {
    return 0 &lt;= x &amp;&amp; x &lt; 10 &amp;&amp; 0 &lt;= y &amp;&amp; y &lt; 10;
}
int main() {
    freopen("buckets.in", "r", stdin);
    freopen("buckets.out", "w", stdout);
    for (int i = 0; i &lt; 10; i++) {
        scanf("%s", s[i]);
    }
    memset(d, -1, sizeof d);
    for (int i = 0; i &lt; 10; i++) {
        for (int j = 0; j &lt; 10; j++) {
            if (s[i][j] == 'L') {
                d[i][j] = 0;
                q.push(i);
                q.push(j);
            }
        }
    }
    while (q.size()) {
        int x = q.front();
        q.pop();
        int y = q.front();
        q.pop();
        for (int k = 0; k &lt; 4; k++) {
            int nx = x + dx[k];
            int ny = y + dy[k];
            if (in(nx, ny) &amp;&amp; d[nx][ny] == -1 &amp;&amp;s[nx][ny] != 'R') {
                d[nx][ny] = d[x][y] + 1;
                q.push(nx);
                q.push(ny);
            }
        }
    }
    for (int i = 0; i &lt; 10; i++) {
        for (int j = 0; j &lt; 10; j++) {
            if (s[i][j] == 'B') {
                printf("%d\n", d[i][j] - 1);
            }
        }
    }
    return 0;
}
</code></pre>
<h2>B2</h2>
<pre><code class="language-cpp line-numbers">#include &lt;bits/stdc++.h&gt;
using namespace std;
bool v[100020];
int n, x, y;
int main() {
    freopen("factory.in", "r", stdin);
    freopen("factory.out", "w", stdout);
    cin &gt;&gt; n;
    for (int i = 1; i &lt; n; i++) {
        cin &gt;&gt; x &gt;&gt; y;
        v[x] = true;
    }
    int cnt = 0, choose;
    for (int i = 1; i &lt;= n; i++) {
        if (!v[i]) {
            cnt++;
            choose = i;
        }
    }
    if (cnt == 1) {
        cout &lt;&lt; choose &lt;&lt; endl;
    } else {
        cout &lt;&lt; -1 &lt;&lt; endl;
    }
}
</code></pre>
<h2>B3</h2>
<pre><code class="language-python line-numbers">import sys
sys.stdin = open('evolution.in', 'r')
sys.stdout = open('evolution.out', 'w')
n = input()
g = {}
cnt = 0
a = []
for i in range(n):
    b = raw_input().split()[1:]
    for j in range(len(b)):
        if b[j] not in g:
            g[b[j]] = cnt
            cnt += 1
        b[j] = g[b[j]]
    a.append(set(b))

e = [[] for i in range(cnt)]
d = [0 for i in range(cnt)]
for i in range(n):
    for j in range(i):
        f = a[i] &amp; a[j]
        g = a[i] ^ a[j]
        for x in f:
            for y in g:
                e[x].append(y)
                d[y] += 1

q = []
for i in range(cnt):
    if d[i] == 0:
        q.append(i)
while len(q):
    u = q.pop()
    for i in e[u]:
        d[i] -= 1
        if d[i] == 0:
            q.append(i)

if sum(d) == 0:
    print 'yes'
else:
    print 'no'
</code></pre>
<h1>Silver</h1>
<h2>S1</h2>
<pre><code class="language-cpp line-numbers">#include &lt;bits/stdc++.h&gt;
using namespace std;
int n;
int a[1020][1020];
int b[1020][1020];
char c;
void row(int i) {
    for (int j = 0; j &lt; n; j++) {
        a[i][j] ^= 1;
    }
}
void column(int j) {
    for (int i = 0; i &lt; n; i++) {
        a[i][j] ^= 1;
    }
}
bool fuck(int x, int y) {
//  return true;
    a[x][y] ^= 1;
    for (int i = 0; i &lt; n; i++) {
        for (int j = 0; j &lt; n; j++) {
            for (int di = 1; di &lt;= 2 &amp;&amp; i + di &lt; n; di++) {
                for (int dj = 1; dj &lt;= 2 &amp;&amp; j + dj &lt; n; dj++) {
                    if ((a[i][j] ^ a[i][j + dj] ^ a[i + di][j] ^ a[i + di][j + dj]) == 1) {
                        return false;
                    }
                }
            }
        }
    }
    return true;
}
int main() {
    freopen("leftout.in", "r", stdin);
    freopen("leftout.out", "w", stdout);
    scanf("%d", &amp;n);
    for (int i = 0; i &lt; n; i++) {
        for (int j = 0; j &lt; n; j++) {
            scanf(" %c", &amp;c);
            if (c == 'L') {
                a[i][j] = 0;
            } else {
                a[i][j] = 1;
            }
        }
    }
    for (int i = 0; i &lt; n; i++) {
        for (int j = 0; j &lt; n; j++) {
            b[i][j] = 1;
        }
    }
    for (int i = 0; i &lt; n; i++) {
        for (int j = 0; j &lt; n; j++) {
            for (int di = 1; di &lt;= 2 &amp;&amp; i + di &lt; n; di++) {
                for (int dj = 1; dj &lt;= 2 &amp;&amp; j + dj &lt; n; dj++) {
                    if ((a[i][j] ^ a[i][j + dj] ^ a[i + di][j] ^ a[i + di][j + dj]) == 0) {
                        b[i][j] = 0;
                        b[i][j + dj] = 0;
                        b[i + di][j] = 0;
                        b[i + di][j + dj] = 0;
                    }
                }
            }
        }
    }
    for (int i = 0; i &lt; n; i++) {
        for (int j = 0; j &lt; n; j++) {
            if (b[i][j] == 1) {
                if (fuck(i, j)) {
                    printf("%d %d\n", i + 1, j + 1);
                    return 0;
                } else {
                    printf("-1\n");
                    return 0;
                }
            }
        }
    }
    printf("-1\n");
    return 0;
}
</code></pre>
<h2>S2</h2>
<pre><code class="language-cpp line-numbers">#include &lt;bits/stdc++.h&gt;
using namespace std;
int n;
struct P{
    int x, y;
    P(int x = 0, int y = 0): x(x), y(y) {

    }
    void scan() {
        scanf("%d%d", &amp;x, &amp;y);
    }
};
bool operator&lt;(const P&amp;a, const P&amp;b) {
    return a.x &lt; b.x || (a.x == b.x &amp;&amp; a.y &lt; b.y);
}
P operator-(const P&amp;a, const P&amp;b) {
    return P(a.x - b.x, a.y - b.y);
}
struct L{
    int id;
    P a, b;
    void scan() {
        a.scan();
        b.scan();
        if (b &lt; a) {
            swap(a, b);
        }
    }
}a[1000020];

struct cmp
{
    bool operator()(int u, int v)const{
        return a[u].a.y &lt; a[v].a.y || (a[u].a.y == a[v].a.y &amp;&amp; a[u].id &lt; a[v].id);
    }
};


long long det(P a, P b) {
    return (long long)a.x * b.y - (long long)b.x * a.y;
}
int sgn(long long x) {
    if (x &lt; 0) {
        return -1;
    }
    if (x &gt; 0) {
        return 1;
    }
    return 0;
}
bool judge(const L &amp;u, const L &amp;v) {
    int sgnva = sgn(det(v.a - u.a, u.b - u.a));
    int sgnvb = sgn(det(v.b - u.a, u.b - u.a));
    if (sgnva * sgnvb == 1) {
        return false;
    }
    int sgnua = sgn(det(u.a - v.a, v.b - v.a));
    int sgnub = sgn(det(u.b - v.a, v.b - v.a));
    if (sgnua * sgnub == 1) {
        return false;
    }
    return true;
}
set&lt;int, cmp&gt; s;
pair&lt;int, int&gt; e[200020];
int work() {
    for (int i = 0; i &lt; 2 * n; i++) {
        if (e[i].second &gt; 0) {
            set&lt;int&gt;::iterator it = s.lower_bound(e[i].second);
            if (judge(a[e[i].second], a[*it])) {
                return e[i].second;
            }
            if (judge(a[e[i].second], a[*--it])) {
                return e[i].second;
            }
            s.insert(e[i].second);
        } else {
            set&lt;int&gt;::iterator it = s.lower_bound(-e[i].second);
            set&lt;int&gt;::iterator ti = it;
            ti--;
            if (judge(a[*ti], a[*it])) {
                return *ti;
            }
            s.erase(-e[i].second);
        }
    }
    return -1;
}
int main() {
    freopen("cowjump.in", "r", stdin);
    freopen("cowjump.out", "w", stdout);
    scanf("%d", &amp;n);
    for (int i = 1; i &lt;= n; i++) {
        a[i].id = i;
        a[i].scan();
        e[2 * i - 2] = make_pair(a[i].a.x, +i);
        e[2 * i - 1] = make_pair(a[i].b.x, -i);
    }
    {
        a[n + 1].id = n + 1;
        a[n + 1].a = P(-1000000007, -1000000007);
        a[n + 1].b = P(1000000007, -1000000007);
        a[n + 2].id = n + 2;
        a[n + 2].a = P(-1000000007, 1000000007);
        a[n + 2].b = P(1000000007, 1000000007);
        s.insert(n + 1);
        s.insert(n + 2);
    }
    sort(e, e + 2 * n);
    int res = work();
    assert(res != -1);
    vector&lt;int&gt; inter;
    for (int i = 1; i &lt;= n; i++) {
        if (i != res &amp;&amp; judge(a[i], a[res])) {
            inter.push_back(i);
        }
    }
    if (inter.size() == 1) {
        printf("%d\n", min(inter[0], res));
    } else {
        printf("%d\n", res);
    }
    return 0;
}
</code></pre>
<h2>S3</h2>
<pre><code class="language-cpp line-numbers">#include &lt;bits/stdc++.h&gt;
using namespace std;
int n, m;
vector&lt;int&gt; a[100020];
int xx[100020];
int yy[100020];
int v[100020];
int maxx, minx;
int maxy, miny;
int ans;
void dfs(int x) {
    if (v[x]) {
        return;
    }
    v[x] = true;
    maxx = max(maxx, xx[x]);
    minx = min(minx, xx[x]);
    maxy = max(maxy, yy[x]);
    miny = min(miny, yy[x]);
    for (int i = 0; i &lt; a[x].size(); i++) {
        dfs(a[x][i]);
    }
}
int main() {
    freopen("fenceplan.in", "r", stdin);
    freopen("fenceplan.out", "w", stdout);
    scanf("%d%d", &amp;n, &amp;m);
    for (int i = 1; i &lt;= n; i++) {
        scanf("%d%d", &amp;xx[i], &amp;yy[i]);
    }
    for (int i = 0; i &lt; m; i++) {
        int x, y;
        scanf("%d%d", &amp;x, &amp;y);
        a[x].push_back(y);
        a[y].push_back(x);
    }
    ans = 1e9;
    for (int i = 1; i &lt;= n; i++) {
        if (!v[i]) {
            maxx = maxy = 0;
            minx = miny = 1e9;
            dfs(i);
            ans = min(ans, (maxx - minx + maxy - miny) * 2);
        }
    }
    printf("%d\n", ans);
    return 0;
}
</code></pre>
<h1>Gold</h1>
<h2>G1</h2>
<p>对于a[l + 1], a[l + 2], &#8230;, a[r] 共r-l个<br />
所需要的代价是<br />
(mx[l + 1][r] * (r &#8211; l) &#8211; (s[r] &#8211; s[l]))<br />
设f[i][j]表示只考虑前i个组蛇，用了j种大小的网<br />
（注意可以改变k次网的大小，相当于可以用k+1种不同的网的大小。）</p>
<p>枚举最后一段的起点，假设最后一段是a[k+1], a[k+2], &#8230;, a[i]<br />
那么转移是 f[i][j] = min(f[i][j], f[k][j &#8211; 1] + (mx[k + 1][i] * (i &#8211; k) &#8211; (s[i] &#8211; s[k])));</p>
<pre><code class="language-cpp line-numbers">#include &lt;bits/stdc++.h&gt;
using namespace std;
long long f[420][420];
long long a[420];
long long mx[420][420];
long long s[420];

int n, m;
int main() {
    freopen("snakes.in", "r", stdin);
    freopen("snakes.out", "w", stdout);
    cin &gt;&gt; n &gt;&gt; m;
    m++;
    for (int i = 1; i &lt;= n; i++) {
        cin &gt;&gt; a[i];
        s[i] = s[i - 1] + a[i];
    }
    for (int i = 1; i &lt;= n; i++) {
        mx[i][i] = a[i];
        for (int j = i + 1; j &lt;= n; j++) {
            mx[i][j] = max(mx[i][j - 1], a[j]);
        }
    }
    memset(f, 0x3f, sizeof f);
    f[0][0] = 0;
    for (int i = 1; i &lt;= n; i++) {
        for (int j = 1; j &lt;= m; j++) {
            for (int k = 0; k &lt; i; k++) {
                f[i][j] = min(f[i][j], f[k][j - 1] + (mx[k + 1][i] * (i - k) - (s[i] - s[k])));
            }
        }
    }
    cout &lt;&lt; f[n][m] &lt;&lt; endl;
    return 0;
}
</code></pre>
<h2>G2</h2>
<p>这是一个n个点的完全图<br />
用Prim算法求最小生成树，时间复杂度O(n^2)<br />
记录最小生成树上所有边的边权<br />
输出最小生成树的第m大的边即可</p>
<pre><code class="language-cpp line-numbers">#include &lt;bits/stdc++.h&gt;
using namespace std;
int n, m;
vector&lt;pair&lt;long long, pair&lt;int, int&gt; &gt; &gt;e;
int f[10000];
long long d[10000];
int p[10000];
bool v[10000];
long long get(long long x, long long y) {
    if (x &gt; y) {
        swap(x, y);
    }
    return ((2019201913 * x + 2019201949 * y) % 2019201997);
}

int main() {
    freopen("walk.in", "r", stdin);
    freopen("walk.out", "w", stdout);
    cin &gt;&gt; n &gt;&gt; m;
    memset(d, 0x3f, sizeof d);
    d[1] = 0;
    for (int i = 1; i &lt;= n; i++) {
        long long mindis = 1e18;
        int minidx = -1;
        for (int j = 1; j &lt;= n; j++) {
            if (!v[j]) {
                if (d[j] &lt; mindis) {
                    mindis = d[j];
                    minidx = j;
                }
            }
        }
        v[minidx] = true;
        if (minidx != 1) {
            assert(p[minidx] != 0);
//          cerr &lt;&lt; minidx &lt;&lt; ' ' &lt;&lt; p[minidx] &lt;&lt; ' ' &lt;&lt; d[minidx] &lt;&lt; endl;
            e.push_back(make_pair(d[minidx], make_pair(minidx, p[minidx])));
//          cerr &lt;&lt; minidx &lt;&lt; ' ' &lt;&lt; p[minidx] &lt;&lt; ' ' &lt;&lt; d[minidx] &lt;&lt; endl;
        }
        for (int j = 1; j &lt;= n; j++) {
            if (!v[j]) {
                long long dd = get(minidx, j);
                if (dd &lt; d[j]) {
                    d[j] = dd;
                    p[j] = minidx;
                }
            }
        }
    }
    sort(e.begin(), e.end());
    assert(e.size() == n - 1);
    for (int i = 0; i &lt; n - 1; i++) {
//      cerr &lt;&lt; e[i].first &lt;&lt; ' ' &lt;&lt; e[i].second.first &lt;&lt; ' ' &lt;&lt; e[i].second.second &lt;&lt; endl;
    }
    cout &lt;&lt; e[n - m].first &lt;&lt; endl;
    return 0;
}
</code></pre>
<h2>G3</h2>
<p>假设前n个数字和后n个数字不交换<br />
那么每次交换0和1可以让逆序对个数+1或者-1<br />
那么只需要计算出前n个数字逆序对，和后n个数字逆序对的个数即可<br />
答案即为2个的差</p>
<p>接下来要考虑两边0和1的交换<br />
用左边的一些1换右边的一些0<br />
或者是<br />
用左边的一些0换右边的一些1</p>
<p>一定是左边最靠右的几个1，换右边最靠左的几个0<br />
左边的1被改掉，会使得这个1和右边的0形成的逆序对消失<br />
并且因为改成0，会使得这个0和左边1形成新的逆序对</p>
<p>右边的0被改掉，会使得这个0和左边的1形成的逆序对消失<br />
并且因为改成1，会使得这个1和右边0形成新的逆序对</p>
<p>枚举改了几个即可。</p>
<p>一定是左边最靠右的几个0，换右边最靠左的几个1<br />
左边的0改成1，会使得这个0和左边的1形成的逆序对消失，不会产生新的逆序对<br />
右边的1改成0，会使得这个1和右边的0形成的逆序对消失，不会产生新的逆序对</p>
<pre><code class="language-cpp line-numbers">#include &lt;bits/stdc++.h&gt;
using namespace std;
long long ans;
int a[200020];
int n;
void work1() {
    long long ansl = 0, cntl0 = 0;
    long long ansr = 0, cntr1 = 0;
    vector&lt;pair&lt;int, int&gt; &gt; L;
    vector&lt;pair&lt;int, int&gt; &gt; R;
    for (int i = n - 1; i &gt;= 0; i--) {
        if (a[i] == 0) {
            cntl0++;
        } else {
            L.push_back(make_pair(i, cntl0));
            ansl += cntl0;
        }
    }
    for (int i = n; i &lt; 2 * n; i++) {
        if (a[i] == 1) {
            cntr1++;
        } else {
            R.push_back(make_pair(i, cntr1));
            ansr += cntr1;
        }
    }
    ans = min(ans, abs(ansl - ansr));
    long long tmp = 0;
    for (int i = 0; i &lt; L.size() &amp;&amp; i &lt; R.size(); i++) {
        tmp += (R[i].first - L[i].first);
        ansl -= L[i].second;
        ansl += L.size() - i + 1;
        ansr -= R[i].second;
        ansr += R.size() - i + 1;
//      cerr &lt;&lt; ansl &lt;&lt; ' ' &lt;&lt; ansr &lt;&lt; ' ' &lt;&lt; tmp &lt;&lt; endl;
        ans = min(ans, abs(ansl - ansr) + tmp);
    }
    return;
}
void work2() {
    long long ansl = 0, cntl1 = 0;
    long long ansr = 0, cntr0 = 0;
    vector&lt;pair&lt;int, int&gt; &gt; L;
    vector&lt;pair&lt;int, int&gt; &gt; R;
    for (int i = 0; i &lt; n; i++) {
        if (a[i] == 0) {
            L.push_back(make_pair(i, cntl1));
            ansl += cntl1;
        } else {
            cntl1++;
        }
    }
    for (int i = 2 * n - 1; i &gt;= n; i--) {
        if (a[i] == 1) {
            R.push_back(make_pair(i, cntr0));
            ansr += cntr0;
        } else {
            cntr0++;
        }
    }
    reverse(L.begin(), L.end());
    reverse(R.begin(), R.end());
    ans = min(ans, abs(ansl - ansr));
//  cerr &lt;&lt; ansl &lt;&lt; ' ' &lt;&lt; ansr &lt;&lt; endl;
    long long tmp = 0;
    for (int i = 0; i &lt; L.size() &amp;&amp; i &lt; R.size(); i++) {
        tmp += (R[i].first - L[i].first);
        ansl -= L[i].second;
        ansr -= R[i].second;
//      cerr &lt;&lt; ansl &lt;&lt; ' ' &lt;&lt; ansr &lt;&lt; ' ' &lt;&lt; tmp &lt;&lt; endl;
        ans = min(ans, abs(ansl - ansr) + tmp);
    }
    return;
}
int main() {
    freopen("balance.in", "r", stdin);
    freopen("balance.out", "w", stdout);
    scanf("%d", &amp;n);
    for (int i = 0; i &lt; 2 * n; i++) {
        scanf("%d", &amp;a[i]);
    }
    ans = 1e18;
    work1();
    work2();
    printf("%lldn", ans);
    return 0;
}
</code></pre>
<h1>Platinum</h1>
<h2>P1</h2>
<p>把图画在平面上，LCA。</p>
<p>每个点左上角的区域表示自己这个子树</p>
<p>之所以2个矩形，是因为一个矩形只能覆盖 某个点到自己祖先的路径<br />
任意2点之间的路径要用2个 矩形覆盖<br />
（x到lca，y到lca，但是这样lca会被覆盖两次，需要处理一下）</p>
<pre><code class="language-cpp line-numbers">#include "grader.h"
#include &lt;bits/stdc++.h&gt;
using namespace std;

/*
void addBox(int x1, int y1, int x2, int y2) {
    printf("addBox %d %d %d %dn", x1, y1, x2, y2);
}

void setFarmLocation(int id, int x, int y) {
    printf("setFarmLocation %d %d %dn", id, x, y);
}
*/

vector&lt;int&gt; a[100020];
int f[100020][20];
int d[100020];
int xx[100020], xc;
int yy[100020], yc;
void dfs(int x, int y) {
    f[x][0] = y;
    d[x] = d[y] + 1;
    for (int i = 1; i &lt; 20; i++) {
        f[x][i] = f[f[x][i - 1]][i - 1];
    }
    for (int i = 0; i &lt; a[x].size(); i++) {
        if (a[x][i] != y) {
            dfs(a[x][i], x);
        }
    }
}

void dfs1(int x, int y) {
    xx[x] = ++xc;
    for (int i = 0; i &lt; a[x].size(); i++) {
        if (a[x][i] != y) {
            dfs1(a[x][i], x);
        }
    }
}

void dfs2(int x, int y) {
    yy[x] = ++yc;
    setFarmLocation(x, xx[x], yy[x]);
    for (int i = a[x].size() - 1; i &gt;= 0; i--) {
        if (a[x][i] != y) {
            dfs2(a[x][i], x);
        }
    }
}

void addRoad(int x, int y) {
    a[x].push_back(y);
    a[y].push_back(x);
}

void buildFarms() {
    dfs(0, -1);
    dfs1(0, -1);
    dfs2(0, -1);
}

void notifyFJ(int X, int Y) {
    if (d[X] &lt; d[Y]) {
        swap(X, Y);
    }
    int x = X;
    int y = Y;
    int dd = d[x] - d[y];
    for (int i = 0; i &lt; 20; i++) {
        if (dd &gt;&gt; i &amp; 1) {
            x = f[x][i];
        }
    }
    if (x == y) {
        addBox(xx[x], yy[y], xx[X], yy[X]);
        return;
    }
    for (int i = 20 - 1; i &gt;= 0; i--) {
        if (f[x][i] != f[y][i]) {
            x = f[x][i];
            y = f[y][i];
        }
    }
    addBox(xx[f[x][0]], yy[f[x][0]], xx[X], yy[X]);
    addBox(xx[y], yy[y], xx[Y], yy[Y]);
}

/*
int main() {
    addRoad(1, 2);
    addRoad(1, 3);
    addRoad(2, 4);
    addRoad(2, 5);
    addRoad(3, 6);
    addRoad(3, 7);
    buildFarms();
    notifyFJ(5, 6);
    notifyFJ(1, 7);
}
*/

</code></pre>
<h2>P2</h2>
<p>逐格的插头DP<br />
状态数有132个</p>
<p>状态就是把6个点分组，组不能相交<br />
比如分成<br />
1 2 1 2 3 3<br />
是不行的，1和2相交了<br />
但是<br />
1 2 1 3 1 4<br />
是可以的</p>
<p>然后<br />
30000 * 6 * 132，还要再乘一个转移的复杂度4<br />
大概就是枚举每个点是否和，左边，上边连起来<br />
如果不和左边连边，需要注意左边是否是唯一一个（否则图就不连通了）<br />
如果和左边上边都连边，需要注意不要出环</p>
<p>预处理出来132个状态，在每个（6个）位置，的所有（4个）转移可能，记下来<br />
所有DP状态都需要记录最小代价和方案数</p>
<pre><code class="language-cpp line-numbers">#include &lt;bits/stdc++.h&gt;
using namespace std;
const int mod = 1000000007;
int n, m;
int a[30020][9];
int b[30020][9];
typedef long long ll;
int c[8];
long long timecount = 0;
void decode(int x) {
    for (int i = 0; i &lt; m; i++) {
        c[i] = x &gt;&gt; (3 * i) &amp; 7;
        timecount++;
    }
}
int visited[20], stamp;
int mapped[20];
int encode() {
    stamp++;
    int cnt = 0;
    int re = 0;
    for (int i = 0; i &lt; m; i++) {
        if (visited[c[i]] != stamp) {
            visited[c[i]] = stamp;
            mapped[c[i]] = cnt++;
            c[i] = mapped[c[i]];
        } else {
            c[i] = mapped[c[i]];
        }
        re |= c[i] &lt;&lt; (3 * i);
    }
    return re;
}
pair&lt;ll, int&gt; add(pair&lt;ll, int&gt; a, pair&lt;ll, int&gt; b) {
    if (a.first == b.first) {
        return make_pair(a.first, (a.second + b.second) % mod);
    }
    if (a.first &lt; b.first) {
        return a;
    }
    if (a.first &gt; b.first) {
        return b;
    }
    assert(false);
}
int stateid[262145];
int stateis[262145];
int trans[132][6][4];
int cnt = 0;
namespace qiachangshu {
    int a[10];
    bool ok() {
        for (int i = 0; i &lt; m; i++) {
            for (int j = i + 1; j &lt; m; j++) {
                for (int k = j + 1; k &lt; m; k++) {
                    for (int l = k + 1; l &lt; m; l++) {
                        if (a[i] == a[k] &amp;&amp; a[j] == a[l] &amp;&amp; a[i] != a[j]) {
                            return false;
                        }
                    }
                }
            }
        }
        return true;
    }
    void dfs(int x, int y, int z) {
        if (x == m) {
            if (ok()) {
                stateid[z] = cnt;
                stateis[cnt] = z;
                cnt++;
            }
        } else {
            for (int i = 0; i &lt;= y; i++) {
                a[x] = i;
                dfs(x + 1, max(i + 1, y), z | (i &lt;&lt; (3 * x)));
            }
        }
    }
}
pair&lt;ll, int&gt; f[132], g[132];
void insert(int enc, pair&lt;ll, int&gt; d) {
    assert(stateid[enc] != -1);
    enc = stateid[enc];
    g[enc] = add(g[enc], d);
}

int main() {
    freopen("escape.in", "r", stdin);
    freopen("escape.out", "w", stdout);

    scanf("%d%d", &amp;n, &amp;m);
    for (int i = 0; i &lt; n; i++) {
        for (int j = 1; j &lt; m; j++) {
            scanf("%d", &amp;a[i][j]);
        }
    }
    for (int j = 0; j &lt; m; j++) {
        for (int i = 1; i &lt; n; i++) {
            scanf("%d", &amp;b[i][j]);
        }
    }
    memset(stateid, -1, sizeof stateid);
    qiachangshu::dfs(0, 0, 0);
    for (int j = 0; j &lt; m; j++) {
        for (int k = 0; k &lt; cnt; k++) {
            {// no up, no left
                int cnt = 0;
                for (int l = 0; l &lt; m; l++) {
                    if ((stateis[k] &gt;&gt; (3 * l) &amp; 7) == (stateis[k] &gt;&gt; (3 * j) &amp; 7)) {
                        cnt++;
                    }
                }
                if (cnt &gt; 1) {
                    decode(stateis[k]);
                    c[j] = 17;
                    trans[k][j][0] = encode();
                } else {
                    trans[k][j][0] = -1;
                }
            }
            {// no up, left
                trans[k][j][1] = stateis[k];
            }
            {// up, no left
                if (j &gt; 0) {
                    decode(stateis[k]);
                    int cnt = 0;
                    for (int l = 0; l &lt; m; l++) {
                        if (c[l] == c[j]) {
                            cnt++;
                        }
                    }
                    if (cnt &gt; 1) {
                        c[j] = c[j - 1];
                        trans[k][j][2] = encode();
                    } else {
                        trans[k][j][2] = -1;
                    }
                } else {
                    trans[k][j][2] = -1;
                }
            }
            {// up, left
                if (j &gt; 0) {
                    decode(stateis[k]);
                    if (c[j] != c[j - 1]) {
                        int cj = c[j];
                        for (int l = 0; l &lt; m; l++) {
                            if (c[l] == cj) {
                                c[l] = c[j - 1];
                            }
                        }
                        trans[k][j][3] = encode();
                    } else {
                        trans[k][j][3] = -1;
                    }
                } else {
                    trans[k][j][3] = -1;
                }
            }
        }
    }

    {
        for (int k = 0; k &lt; cnt; k++) {
            f[k] = make_pair(1e18, 0);
        }
        f[0] = make_pair(0, 1);
    }
    for (int i = 0; i &lt; n; i++) {
        for (int j = 0; j &lt; m; j++) {
            if (i == 0 &amp;&amp; j == 0) {
                continue;
            }
            for (int k = 0; k &lt; cnt; k++) {
                g[k] = make_pair(1e18, 0);
            }
            for (int k = 0; k &lt; cnt; k++) {
                if (f[k].first == 1e18 || f[k].second == 0) {
                    continue;
                }
                {// no up, no left
                    if (trans[k][j][0] != -1) {
                        insert(trans[k][j][0], f[k]);
                    }
                }
                {// no up, left
                    if (i &gt; 0) {
                        if (trans[k][j][1] != -1) {
                            insert(trans[k][j][1], make_pair(f[k].first + b[i][j], f[k].second));
                        }
                    }
                }
                {// up, no left
                    if (trans[k][j][2] != -1) {
                        insert(trans[k][j][2], make_pair(f[k].first + a[i][j], f[k].second));
                    }
                }
                {// up, left
                    if (i &gt; 0) {
                        if (trans[k][j][3] != -1) {
                            insert(trans[k][j][3], make_pair(f[k].first + a[i][j] + b[i][j], f[k].second));
                        }
                    }
                }
            }
            swap(f, g);
        }
    }
    cout &lt;&lt; f[0].second &lt;&lt; endl;
//  cerr &lt;&lt; f[0].first &lt;&lt; ' ' &lt;&lt; f[0].second &lt;&lt; endl;
//  cerr &lt;&lt; "TIME COUNT " &lt;&lt; timecount &lt;&lt; endl;
    return 0;
}
</code></pre>
<h2>P3</h2>
<p>注意到高度没有相同的<br />
从低到高依次加入，每次形成的连通区域，就是valley。<br />
但是这样可能加出来的东西有洞，怎么办呢。</p>
<p>从高到低考虑所有依次加入，<br />
感觉就像洞越来越大，然后某个时刻大到和边界连通，就不再是洞了。<br />
那么在 导致他不再是洞的那一次 记录下这个洞的开始时间</p>
<p>这样在从低到高依次加入的时候，如果加入了这个点，我们就知道<br />
这个点为我们带来了一个洞，需要等到 这个洞的开始时间 之后<br />
（这个时候这个洞就被填成实心的了）<br />
再统计这个valley的大小</p>
<p>但是这样有一个微小的bug，就是可能洞中有洞<br />
一个补丁是</p>
<p>不仅要在<br />
某个时刻大到和边界连通<br />
记录下这个洞的开始时间</p>
<p>而且要在导致两个（或者3个，4个）小洞，连通起来的时候<br />
记录下所有洞时间中第二大的<br />
（边界之外的区域看做无限大）</p>
<pre><code class="language-cpp line-numbers">#include &lt;bits/stdc++.h&gt;
using namespace std;
pair&lt;int, pair&lt;int, int&gt; &gt; b[1000020];
int n;
int a[751][751];
int f[1000020];
int c[1000020];
int d[1000020];
int w[751][751];
bool v[751][751];
int dx[] = {0, 0, -1, 1, -1, -1, 1, 1};
int dy[] = {-1, 1, 0, 0, -1, 1, -1, 1};
int F(int x) {
    return f[x] != x ? f[x] = F(f[x]) : x;
}
bool U(int x, int y) {
    x = F(x);
    y = F(y);
    if (x != y) {
        f[y] = x;
        c[x] += c[y];
        d[x] = max(d[x], d[y]);
        return true;
    }
    return true;
}
bool in(int x, int y) {
    return 0 &lt;= x &amp;&amp; x &lt; n &amp;&amp; 0 &lt;= y &amp;&amp; y &lt; n;
}
void print() {
    for (int i = 0; i &lt; n; i++) {
        for (int j = 0; j &lt; n; j++) {
            printf("%d", v[i][j]);
        }
        printf("n");
    }
}
int main() {
    freopen("valleys.in", "r", stdin);
    freopen("valleys.out", "w", stdout);
    scanf("%d", &amp;n);
    for (int i = 0; i &lt; n; i++) {
        for (int j = 0; j &lt; n; j++) {
            scanf("%d", &amp;a[i][j]);
            b[i * n + j] = make_pair(a[i][j], make_pair(i, j));
        }
    }
    sort(b, b + n * n);
    for (int i = 0; i &lt;= n * n; i++) {
        f[i] = i;
        c[i] = 1;
        d[i] = 0;
    }
    memset(v, 0, sizeof v);
    for (int i = n * n - 1; i &gt;= 0; i--) {
        v[b[i].second.first][b[i].second.second] = true;
        if (b[i].second.first == 0 || b[i].second.first == n - 1) {
            U(n * n, b[i].second.first * n + b[i].second.second);
        }
        if (b[i].second.second == 0 || b[i].second.second == n - 1) {
            U(n * n, b[i].second.first * n + b[i].second.second);
        }
        for (int k = 0; k &lt; 8; k++) {
            int nx = b[i].second.first + dx[k];
            int ny = b[i].second.second + dy[k];
            if (in(nx, ny) &amp;&amp; v[nx][ny] &amp;&amp; F(nx * n + ny) == F(n * n)) {
                U(b[i].second.first * n + b[i].second.second, nx * n + ny);
            }
        }
        int ff = F(b[i].second.first * n + b[i].second.second);
        d[ff] = max(d[ff], i);
        if (ff != F(n * n)) {
            vector&lt;int&gt; pending;
            for (int k = 0; k &lt; 8; k++) {
                int nx = b[i].second.first + dx[k];
                int ny = b[i].second.second + dy[k];
                if (in(nx, ny) &amp;&amp; v[nx][ny]) {
                    if (F(b[i].second.first * n + b[i].second.second) != F(nx * n + ny)) {
                        pending.push_back(d[F(nx * n + ny)]);
                    }
                    U(b[i].second.first * n + b[i].second.second, nx * n + ny);
                }
            }
            assert(pending.size() &lt;= 4);
            if (pending.size() &gt;= 2) {
                sort(pending.begin(), pending.end());
                int &amp;ref = w[b[i].second.first][b[i].second.second];
                ref = max(ref, pending[pending.size() - 2]);
            }
        } else {
            for (int k = 0; k &lt; 8; k++) {
                int nx = b[i].second.first + dx[k];
                int ny = b[i].second.second + dy[k];
                if (in(nx, ny) &amp;&amp; v[nx][ny] &amp;&amp; F(nx * n + ny) != F(n * n)) {
                    int &amp;ref = w[b[i].second.first][b[i].second.second];
                    ref = max(ref, d[F(nx * n + ny)]);
                    U(b[i].second.first * n + b[i].second.second, nx * n + ny);
                }
            }
        }
    }

    for (int i = 0; i &lt; n * n; i++) {
        f[i] = i;
        c[i] = 1;
        d[i] = w[i / n][i % n];
//      printf("%d %d %dn", i / n, i % n, d[i]);
    }
    /*
    for (int i = 0; i &lt; n; i++) {
        for (int j = 0; j &lt; n; j++) {
            printf("%d ", w[i][j]);
        }
        printf("n");
    }
    */
    memset(v, 0, sizeof v);
    long long ans = 0;
    for (int i = 0; i &lt; n * n; i++) {
        v[b[i].second.first][b[i].second.second] = true;
        for (int k = 0; k &lt; 4; k++) {
            int nx = b[i].second.first + dx[k];
            int ny = b[i].second.second + dy[k];
            if (in(nx, ny) &amp;&amp; v[nx][ny]) {
                U(b[i].second.first * n + b[i].second.second, nx * n + ny);
            }
        }
        int ff = F(b[i].second.first * n + b[i].second.second);
        if (d[ff] &lt;= i) {
//          cout &lt;&lt; i &lt;&lt; ' ' &lt;&lt; c[ff] &lt;&lt; ' ' &lt;&lt; b[i].second.first &lt;&lt; ' ' &lt;&lt; b[i].second.second &lt;&lt; endl;
            ans += c[ff];
        }
    }
    cout &lt;&lt; ans &lt;&lt; endl;
}
</code></pre>
					</div><!-- .entry-content -->
		
		<footer class="entry-meta">
			This entry was posted in <a href="http://wwwwodddd.com/category/uncategorized/" rel="category tag">Uncategorized</a> and tagged <a href="http://wwwwodddd.com/tag/usaco/" rel="tag">USACO</a> on <a href="http://wwwwodddd.com/usaco-2019-open/" title="00:00" rel="bookmark"><time class="entry-date" datetime="2019-04-03T00:00:34+08:00">2019-04-03</time></a><span class="by-author"> by <span class="author vcard"><a class="url fn n" href="http://wwwwodddd.com/author/wwwwodddd/" title="View all posts by wwwwodddd" rel="author">wwwwodddd</a></span></span>.								</footer><!-- .entry-meta -->
	</article><!-- #post -->

				<nav class="nav-single">
					<h3 class="assistive-text">Post navigation</h3>
					<span class="nav-previous"><a href="http://wwwwodddd.com/bestcoder-round-72/" rel="prev"><span class="meta-nav">&larr;</span> BestCoder Round #72</a></span>
					<span class="nav-next"><a href="http://wwwwodddd.com/gcj-2019-r1b/" rel="next">GCJ 2019 R1B <span class="meta-nav">&rarr;</span></a></span>
				</nav><!-- .nav-single -->

				
<div id="comments" class="comments-area">

	
	
		<div id="respond" class="comment-respond">
		<h3 id="reply-title" class="comment-reply-title">Leave a Reply <small><a rel="nofollow" id="cancel-comment-reply-link" href="/usaco-2019-open/#respond" style="display:none;">Cancel reply</a></small></h3>			<form action="http://wwwwodddd.com/wp-comments-post.php" method="post" id="commentform" class="comment-form">
				<p class="comment-notes"><span id="email-notes">Your email address will not be published.</span> Required fields are marked <span class="required">*</span></p><p class="comment-form-comment"><label for="comment">Comment</label> <textarea id="comment" name="comment" cols="45" rows="8" maxlength="65525" required="required"></textarea></p><p class="comment-form-author"><label for="author">Name <span class="required">*</span></label> <input id="author" name="author" type="text" value="" size="30" maxlength="245" required='required' /></p>
<p class="comment-form-email"><label for="email">Email <span class="required">*</span></label> <input id="email" name="email" type="text" value="" size="30" maxlength="100" aria-describedby="email-notes" required='required' /></p>
<p class="comment-form-url"><label for="url">Website</label> <input id="url" name="url" type="text" value="" size="30" maxlength="200" /></p>
<p class="form-submit"><input name="submit" type="submit" id="submit" class="submit" value="Post Comment" /> <input type='hidden' name='comment_post_ID' value='166' id='comment_post_ID' />
<input type='hidden' name='comment_parent' id='comment_parent' value='0' />
</p>			</form>
			</div><!-- #respond -->
	
</div><!-- #comments .comments-area -->

			
		</div><!-- #content -->
	</div><!-- #primary -->


			<div id="secondary" class="widget-area" role="complementary">
			<aside id="search-2" class="widget widget_search"><form role="search" method="get" id="searchform" class="searchform" action="http://wwwwodddd.com/">
				<div>
					<label class="screen-reader-text" for="s">Search for:</label>
					<input type="text" value="" name="s" id="s" />
					<input type="submit" id="searchsubmit" value="Search" />
				</div>
			</form></aside>		<aside id="recent-posts-2" class="widget widget_recent_entries">		<h3 class="widget-title">Recent Posts</h3>		<ul>
											<li>
					<a href="http://wwwwodddd.com/gcj-2019-r1b/">GCJ 2019 R1B</a>
									</li>
											<li>
					<a href="http://wwwwodddd.com/usaco-2019-open/">USACO 2019 OPEN</a>
									</li>
											<li>
					<a href="http://wwwwodddd.com/bestcoder-round-72/">BestCoder Round #72</a>
									</li>
											<li>
					<a href="http://wwwwodddd.com/luogu-p2831/">Luogu P2831 愤怒的小鸟</a>
									</li>
											<li>
					<a href="http://wwwwodddd.com/2019-51nod-2/">2019年十二省NOI省选联考模测（第二场）</a>
									</li>
					</ul>
		</aside><aside id="recent-comments-2" class="widget widget_recent_comments"><h3 class="widget-title">Recent Comments</h3><ul id="recentcomments"><li class="recentcomments"><span class="comment-author-link"><a href='http://bubbleioa.top/' rel='external nofollow' class='url'>冒泡ioa</a></span> on <a href="http://wwwwodddd.com/usaco-2019-jan/#comment-47">USACO 2019 JAN</a></li><li class="recentcomments"><span class="comment-author-link"><a href='https://www.k-xzy.xyz' rel='external nofollow' class='url'>Remmina</a></span> on <a href="http://wwwwodddd.com/usaco-2018-dec/#comment-44">USACO 2018 DEC</a></li><li class="recentcomments"><span class="comment-author-link"><a href='http://fff' rel='external nofollow' class='url'>hao911</a></span> on <a href="http://wwwwodddd.com/%e8%bf%99%e9%87%8c%e7%a9%ba%e7%a9%ba%e5%a6%82%e4%b9%9f/#comment-43">这里空空如也</a></li><li class="recentcomments"><span class="comment-author-link"><a href='https://wordpress.org/' rel='external nofollow' class='url'>A WordPress Commenter</a></span> on <a href="http://wwwwodddd.com/einheit/#comment-1">网站重构</a></li><li class="recentcomments"><span class="comment-author-link"><a href='http://www.myshareedu.com:3000/' rel='external nofollow' class='url'>LPteamJP</a></span> on <a href="http://wwwwodddd.com/%e8%bf%99%e9%87%8c%e7%a9%ba%e7%a9%ba%e5%a6%82%e4%b9%9f/#comment-11">这里空空如也</a></li></ul></aside><aside id="archives-2" class="widget widget_archive"><h3 class="widget-title">Archives</h3>		<ul>
				<li><a href='http://wwwwodddd.com/2019/04/'>April 2019</a></li>
	<li><a href='http://wwwwodddd.com/2019/03/'>March 2019</a></li>
	<li><a href='http://wwwwodddd.com/2019/02/'>February 2019</a></li>
	<li><a href='http://wwwwodddd.com/2019/01/'>January 2019</a></li>
	<li><a href='http://wwwwodddd.com/2018/12/'>December 2018</a></li>
	<li><a href='http://wwwwodddd.com/2018/11/'>November 2018</a></li>
	<li><a href='http://wwwwodddd.com/2018/07/'>July 2018</a></li>
	<li><a href='http://wwwwodddd.com/2018/01/'>January 2018</a></li>
		</ul>
			</aside><aside id="categories-2" class="widget widget_categories"><h3 class="widget-title">Categories</h3>		<ul>
				<li class="cat-item cat-item-1"><a href="http://wwwwodddd.com/category/uncategorized/" >Uncategorized</a>
</li>
		</ul>
			</aside><aside id="meta-2" class="widget widget_meta"><h3 class="widget-title">Meta</h3>			<ul>
						<li><a href="http://wwwwodddd.com/wp-login.php">Log in</a></li>
			<li><a href="http://wwwwodddd.com/feed/">Entries <abbr title="Really Simple Syndication">RSS</abbr></a></li>
			<li><a href="http://wwwwodddd.com/comments/feed/">Comments <abbr title="Really Simple Syndication">RSS</abbr></a></li>
			<li><a href="https://wordpress.org/" title="Powered by WordPress, state-of-the-art semantic personal publishing platform.">WordPress.org</a></li>			</ul>
			</aside>		</div><!-- #secondary -->
		</div><!-- #main .wrapper -->
	<footer id="colophon" role="contentinfo">
		<div class="site-info">
									<a href="https://wordpress.org/" class="imprint" title="Semantic Personal Publishing Platform">
				Proudly powered by WordPress			</a>
		</div><!-- .site-info -->
	</footer><!-- #colophon -->
</div><!-- #page -->

<script type='text/javascript' src='http://cdn.jsdelivr.net/wp/wp-editormd/tags/10.0.3/assets/jQuery/jquery.min.js?ver=10.0.3'></script>
<script type='text/javascript' src='http://cdn.jsdelivr.net/wp/wp-editormd/tags/10.0.3/assets/KaTeX/katex.min.js?ver=10.0.3'></script>
<script type='text/javascript' src='http://cdn.jsdelivr.net/wp/wp-editormd/tags/10.0.3/assets/ClipBoard/clipboard.min.js?ver=2.0.1'></script>
<script type='text/javascript' src='http://cdn.jsdelivr.net/wp/wp-editormd/tags/10.0.3/assets/Prism.js/components/prism-core.min.js?ver=1.15.0'></script>
<script type='text/javascript' src='http://cdn.jsdelivr.net/wp/wp-editormd/tags/10.0.3/assets/Prism.js/plugins/autoloader/prism-autoloader.min.js?ver=1.15.0'></script>
<script type='text/javascript' src='http://cdn.jsdelivr.net/wp/wp-editormd/tags/10.0.3/assets/Prism.js/plugins/toolbar/prism-toolbar.min.js?ver=1.15.0'></script>
<script type='text/javascript' src='http://cdn.jsdelivr.net/wp/wp-editormd/tags/10.0.3/assets/Prism.js/plugins/line-numbers/prism-line-numbers.min.js?ver=1.15.0'></script>
<script type='text/javascript' src='http://cdn.jsdelivr.net/wp/wp-editormd/tags/10.0.3/assets/Prism.js/plugins/show-language/prism-show-language.min.js?ver=1.15.0'></script>
<script type='text/javascript' src='http://cdn.jsdelivr.net/wp/wp-editormd/tags/10.0.3/assets/Prism.js/plugins/copy-to-clipboard/prism-copy-to-clipboard.min.js?ver=1.15.0'></script>
<script type='text/javascript' src='http://wwwwodddd.com/wp-includes/js/comment-reply.min.js?ver=5.1.1'></script>
<script type='text/javascript' src='http://wwwwodddd.com/wp-includes/js/wp-embed.min.js?ver=5.1.1'></script>
        <script type="text/javascript">
            (function ($) {
                $(document).ready(function () {
                    $(".katex.math.inline").each(function () {
                        var parent = $(this).parent()[0];
                        if (parent.localName !== "code") {
                            var texTxt = $(this).text();
                            var el = $(this).get(0);
                            try {
                                katex.render(texTxt, el);
                            } catch (err) {
                                $(this).html("<span class=\'err\'>" + err);
                            }
                        } else {
                            $(this).parent().text($(this).parent().text());
                        }
                    });
                    $(".katex.math.multi-line").each(function () {
                        var texTxt = $(this).text();
                        var el = $(this).get(0);
                        try {
                            katex.render(texTxt, el, {displayMode: true})
                        } catch (err) {
                            $(this).html("<span class=\'err\'>" + err)
                        }
                    });
                })
            })(jQuery);
        </script>
				<script type="text/javascript">
			Prism.plugins.autoloader.languages_path = "http://cdn.jsdelivr.net/wp/wp-editormd/tags/10.0.3/assets/Prism.js/components/";
		</script>
		</body>
</html>
